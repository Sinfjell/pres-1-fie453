plot_data_revtq <- data.frame(revtq = seq(min(new_compustat_data$revtq), max(new_compustat_data$revtq), length.out=100))
# Predict using the fitted models
plot_data_cogsq$predicted_uniamiq <- predict(fit_spline_cogsq, newdata=plot_data_cogsq)
plot_data_revtq$predicted_uniamiq <- predict(fit_spline_revtq, newdata=plot_data_revtq)
# Plotting the spline for cogsq
ggplot(new_compustat_data, aes(x=cogsq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_cogsq, aes(x=cogsq, y=predicted_uniamiq), color='red') +
ggtitle("Spline Fit for cogsq") +
xlab("cogsq") +
ylab("uniamiq")
# Plotting the spline for revtq
ggplot(new_compustat_data, aes(x=revtq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_revtq, aes(x=revtq, y=predicted_uniamiq), color='blue') +
ggtitle("Spline Fit for revtq") +
xlab("revtq") +
ylab("uniamiq")
# Fit the additive model
fit_additive <- gam(uniamiq ~ s(cogsq) + s(revtq), data=new_compustat_data)
summary(fit_additive)
# Use the additive model to predict profitability
predicted_profit <- predict(fit_additive, newdata=new_compustat_data)
# Add the predicted_profit as a new column
new_compustat_data$predicted_profit <- predicted_profit
# Plotting the spline for cogsq
ggplot(new_compustat_data, aes(x=cogsq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_cogsq, aes(x=cogsq, y=predicted_uniamiq), color='red') +
ggtitle("Spline Fit for cogsq") +
xlab("cogsq") +
ylab("uniamiq")
# Load necessary libraries
library(splines)
library(mgcv)
library(ggplot2)
# Read and clean the data
compustat_data <- read.csv("compustat2.csv")
# Variable selection rationale: (Provide your rationale here)
selected_vars <- c("uniamiq", "cogsq", "revtq")
# Create a new data frame with only the selected columns
new_compustat_data <- compustat_data[, selected_vars]
new_compustat_data <- na.omit(new_compustat_data)
# Split data into training and testing sets
set.seed(123)
train_index <- sample(seq_len(nrow(new_compustat_data)), size = floor(0.8 * nrow(new_compustat_data)))
train_data <- new_compustat_data[train_index, ]
test_data <- new_compustat_data[-train_index, ]
# Fit individual splines for each variable using training data
fit_spline_cogsq_train <- lm(uniamiq ~ bs(cogsq, df=4), data=train_data)
# Create data for plotting using training data
plot_data_cogsq <- data.frame(cogsq = seq(min(train_data$cogsq), max(train_data$cogsq), length.out=100))
# Predict using the fitted model on training data
plot_data_cogsq$predicted_uniamiq <- predict(fit_spline_cogsq_train, newdata=plot_data_cogsq)
# Plotting the spline for cogsq using training data
ggplot(train_data, aes(x=cogsq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_cogsq, aes(x=cogsq, y=predicted_uniamiq), color='red') +
ggtitle("Spline Fit for cogsq (Training Data)") +
xlab("cogsq") +
ylab("uniamiq")
# Fit the additive model using training data
fit_additive_train <- gam(uniamiq ~ s(cogsq) + s(revtq), data=train_data)
# Use the additive model to predict profitability on test data
predicted_profit_test <- predict(fit_additive_train, newdata=test_data)
# Add the predicted_profit as a new column in test data
test_data$predicted_profit <- predicted_profit_test
# Evaluate model performance (e.g., RMSE)
actual_profit_test <- test_data$uniamiq
rmse <- sqrt(mean((predicted_profit_test - actual_profit_test)^2))
print(paste("Root Mean Square Error (RMSE):", rmse))
# Load necessary libraries
library(splines)
library(mgcv)
library(ggplot2)
# Read and clean the data
compustat_data <- read.csv("compustat2.csv")
# Variable selection rationale: (Provide your rationale here)
selected_vars <- c("uniamiq", "cogsq", "revtq")
# Create a new data frame with only the selected columns
new_compustat_data <- compustat_data[, selected_vars]
new_compustat_data <- na.omit(new_compustat_data)
# Split data into training and testing sets
set.seed(123)
train_index <- sample(seq_len(nrow(new_compustat_data)), size = floor(0.8 * nrow(new_compustat_data)))
train_data <- new_compustat_data[train_index, ]
test_data <- new_compustat_data[-train_index, ]
# Fit individual splines for each variable using training data
fit_spline_cogsq_train <- lm(uniamiq ~ bs(cogsq, df=4), data=train_data)
# Create data for plotting using training data
plot_data_cogsq <- data.frame(cogsq = seq(min(train_data$cogsq), max(train_data$cogsq), length.out=100))
# Predict using the fitted model on training data
plot_data_cogsq$predicted_uniamiq <- predict(fit_spline_cogsq_train, newdata=plot_data_cogsq)
# Plotting the spline for cogsq using training data
ggplot(train_data, aes(x=cogsq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_cogsq, aes(x=cogsq, y=predicted_uniamiq), color='red') +
ggtitle("Spline Fit for cogsq (Training Data)") +
xlab("cogsq") +
ylab("uniamiq")
# Fit the additive model using training data
fit_additive_train <- gam(uniamiq ~ s(cogsq) + s(revtq), data=train_data)
# Use the additive model to predict profitability on test data
predicted_profit_test <- predict(fit_additive_train, newdata=test_data)
# Add the predicted_profit as a new column in test data
test_data$predicted_profit <- predicted_profit_test
# Evaluate model performance (e.g., RMSE)
actual_profit_test <- test_data$uniamiq
rmse <- sqrt(mean((predicted_profit_test - actual_profit_test)^2))
print(paste("Root Mean Square Error (RMSE):", rmse))
# Load necessary libraries
library(splines)
library(mgcv)
library(ggplot2)
# Read and clean the data
compustat_data <- read.csv("compustat2.csv")
# Variable selection rationale: (Provide your rationale here)
selected_vars <- c("uniamiq", "cogsq", "revtq")
# Create a new data frame with only the selected columns
new_compustat_data <- compustat_data[, selected_vars]
new_compustat_data <- na.omit(new_compustat_data)
# Split data into training and testing sets
set.seed(123)
train_index <- sample(seq_len(nrow(new_compustat_data)), size = floor(0.8 * nrow(new_compustat_data)))
train_data <- new_compustat_data[train_index, ]
test_data <- new_compustat_data[-train_index, ]
# Fit individual splines for each variable using training data
fit_spline_cogsq_train <- lm(uniamiq ~ bs(cogsq, df=4), data=train_data)
# Create data for plotting using training data
plot_data_cogsq <- data.frame(cogsq = seq(min(train_data$cogsq), max(train_data$cogsq), length.out=100))
# Predict using the fitted model on training data
plot_data_cogsq$predicted_uniamiq <- predict(fit_spline_cogsq_train, newdata=plot_data_cogsq)
# Plotting the spline for cogsq using training data
ggplot(train_data, aes(x=cogsq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_cogsq, aes(x=cogsq, y=predicted_uniamiq), color='red') +
ggtitle("Spline Fit for cogsq (Training Data)") +
xlab("cogsq") +
ylab("uniamiq")
# Fit the additive model using training data
fit_additive_train <- gam(uniamiq ~ s(cogsq) + s(revtq), data=train_data)
# Use the additive model to predict profitability on test data
predicted_profit_test <- predict(fit_additive_train, newdata=test_data)
# Add the predicted_profit as a new column in test data
test_data$predicted_profit <- predicted_profit_test
# Evaluate model performance (e.g., RMSE)
actual_profit_test <- test_data$uniamiq
rmse <- sqrt(mean((predicted_profit_test - actual_profit_test)^2))
print(paste("Root Mean Square Error (RMSE):", rmse))
View(new_compustat_data)
View(new_compustat_data)
# Load necessary libraries
library(splines)
library(mgcv)
library(ggplot2)
# Read and clean the data
compustat_data <- read.csv("compustat2.csv")
# Variable selection rationale: (Provide your rationale here)
selected_vars <- c("uniamiq", "cogsq", "revtq")
# Create a new data frame with only the selected columns
new_compustat_data <- compustat_data[, selected_vars]
new_compustat_data <- na.omit(new_compustat_data)
# Split data into training and testing sets
set.seed(123)
train_index <- sample(seq_len(nrow(new_compustat_data)), size = floor(0.8 * nrow(new_compustat_data)))
train_data <- new_compustat_data[train_index, ]
test_data <- new_compustat_data[-train_index, ]
# Fit individual splines for each variable using training data
fit_spline_cogsq_train <- lm(uniamiq ~ bs(cogsq, df=4), data=train_data)
# Create data for plotting using training data
plot_data_cogsq <- data.frame(cogsq = seq(min(train_data$cogsq), max(train_data$cogsq), length.out=100))
# Predict using the fitted model on training data
plot_data_cogsq$predicted_uniamiq <- predict(fit_spline_cogsq_train, newdata=plot_data_cogsq)
# Plotting the spline for cogsq using training data
ggplot(train_data, aes(x=cogsq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_cogsq, aes(x=cogsq, y=predicted_uniamiq), color='red') +
ggtitle("Spline Fit for cogsq (Training Data)") +
xlab("cogsq") +
ylab("uniamiq")
# Fit the additive model using training data
fit_additive_train <- gam(uniamiq ~ s(cogsq) + s(revtq), data=train_data)
# Use the additive model to predict profitability on test data
predicted_profit_test <- predict(fit_additive_train, newdata=test_data)
# Add the predicted_profit as a new column in test data
test_data$predicted_profit <- predicted_profit_test
# Evaluate model performance (e.g., RMSE)
actual_profit_test <- test_data$uniamiq
rmse <- sqrt(mean((predicted_profit_test - actual_profit_test)^2))
print(paste("Root Mean Square Error (RMSE):", rmse))
View(new_compustat_data)
View(test_data)
View(train_data)
View(test_data)
View(train_data)
View(test_data)
# Fit the additive model using training data
fit_additive_train <- gam(uniamiq ~ s(cogsq), data=train_data)
# Use the additive model to predict profitability on test data
predicted_profit_test <- predict(fit_additive_train, newdata=test_data)
# Add the predicted_profit as a new column in test data
test_data$predicted_profit <- predicted_profit_test
# Evaluate model performance (e.g., RMSE)
actual_profit_test <- test_data$uniamiq
rmse <- sqrt(mean((predicted_profit_test - actual_profit_test)^2))
print(paste("Root Mean Square Error (RMSE):", rmse))
+ s(revtq)
+ s(revtq)
+ s(revtq)
+ s(revtq)
# Fit the additive model using training data
fit_additive_train <- gam(uniamiq ~ s(cogsq) + s(revtq), data=train_data)
# Use the additive model to predict profitability on test data
predicted_profit_test <- predict(fit_additive_train, newdata=test_data)
# Add the predicted_profit as a new column in test data
test_data$predicted_profit <- predicted_profit_test
# Evaluate model performance (e.g., RMSE)
actual_profit_test <- test_data$uniamiq
rmse <- sqrt(mean((predicted_profit_test - actual_profit_test)^2))
print(paste("Root Mean Square Error (RMSE):", rmse))
# Load necessary libraries
library(splines)
library(mgcv)
library(ggplot2)
# Read and clean the data
compustat_data <- read.csv("compustat2.csv")
# Variable selection rationale: (Provide your rationale here)
selected_vars <- c("uniamiq", "cogsq", "revtq")
# Create a new data frame with only the selected columns
new_compustat_data <- compustat_data[, selected_vars]
new_compustat_data <- na.omit(new_compustat_data)
# Split data into training and testing sets
set.seed(123)
train_index <- sample(seq_len(nrow(new_compustat_data)), size = floor(0.8 * nrow(new_compustat_data)))
train_data <- new_compustat_data[train_index, ]
test_data <- new_compustat_data[-train_index, ]
# Fit individual splines for each variable using training data
fit_spline_cogsq_train <- lm(uniamiq ~ bs(cogsq, df=4), data=train_data)
# Create data for plotting using training data
plot_data_cogsq <- data.frame(cogsq = seq(min(train_data$cogsq), max(train_data$cogsq), length.out=100))
# Predict using the fitted model on training data
plot_data_cogsq$predicted_uniamiq <- predict(fit_spline_cogsq_train, newdata=plot_data_cogsq)
# Plotting the spline for cogsq using training data
ggplot(train_data, aes(x=cogsq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_cogsq, aes(x=cogsq, y=predicted_uniamiq), color='red') +
ggtitle("Spline Fit for cogsq (Training Data)") +
xlab("cogsq") +
ylab("uniamiq")
# Fit the additive model using training data
fit_additive_train <- gam(uniamiq ~ s(cogsq) + s(revtq), data=train_data)
# Use the additive model to predict profitability on test data
predicted_profit_test <- predict(fit_additive_train, newdata=test_data)
# Add the predicted_profit as a new column in test data
test_data$predicted_profit <- predicted_profit_test
# Evaluate model performance on test data (e.g., RMSE)
actual_profit_test <- test_data$uniamiq
rmse_test <- sqrt(mean((predicted_profit_test - actual_profit_test)^2))
print(paste("Root Mean Square Error (RMSE) on Test Data:", rmse_test))
# Use the additive model to predict profitability on training data
predicted_profit_train <- predict(fit_additive_train, newdata=train_data)
# Evaluate model performance on training data (e.g., RMSE)
actual_profit_train <- train_data$uniamiq
rmse_train <- sqrt(mean((predicted_profit_train - actual_profit_train)^2))
print(paste("Root Mean Square Error (RMSE) on Training Data:", rmse_train))
# Load necessary libraries
library(splines)
library(mgcv)
library(ggplot2)
# Read and clean the data
compustat_data <- read.csv("compustat2.csv")
setwd("~/Library/CloudStorage/OneDrive-NorgesHandelshøyskole/FIE453 | Big data/pres-1")
# Load necessary libraries
library(splines)
library(mgcv)
library(ggplot2)
# Read and clean the data
compustat_data <- read.csv("compustat2.csv")
# Variable selection rationale: (Provide your rationale here)
selected_vars <- c("uniamiq", "cogsq", "revtq")
# Create a new data frame with only the selected columns
new_compustat_data <- compustat_data[, selected_vars]
new_compustat_data <- na.omit(new_compustat_data)
# Split data into training and testing sets
set.seed(123)
train_index <- sample(seq_len(nrow(new_compustat_data)), size = floor(0.8 * nrow(new_compustat_data)))
train_data <- new_compustat_data[train_index, ]
test_data <- new_compustat_data[-train_index, ]
# Fit individual splines for each variable using training data
fit_spline_cogsq_train <- lm(uniamiq ~ bs(cogsq, df=4), data=train_data)
# Create data for plotting using training data
plot_data_cogsq <- data.frame(cogsq = seq(min(train_data$cogsq), max(train_data$cogsq), length.out=100))
# Predict using the fitted model on training data
plot_data_cogsq$predicted_uniamiq <- predict(fit_spline_cogsq_train, newdata=plot_data_cogsq)
# Plotting the spline for cogsq using training data
ggplot(train_data, aes(x=cogsq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_cogsq, aes(x=cogsq, y=predicted_uniamiq), color='red') +
ggtitle("Spline Fit for cogsq (Training Data)") +
xlab("cogsq") +
ylab("uniamiq")
# Fit the additive model using training data
fit_additive_train <- gam(uniamiq ~ s(cogsq) + s(revtq), data=train_data)
# Use the additive model to predict profitability on test data
predicted_profit_test <- predict(fit_additive_train, newdata=test_data)
# Add the predicted_profit as a new column in test data
test_data$predicted_profit <- predicted_profit_test
# Evaluate model performance on test data (e.g., RMSE)
actual_profit_test <- test_data$uniamiq
rmse_test <- sqrt(mean((predicted_profit_test - actual_profit_test)^2))
print(paste("Root Mean Square Error (RMSE) on Test Data:", rmse_test))
# Use the additive model to predict profitability on training data
predicted_profit_train <- predict(fit_additive_train, newdata=train_data)
# Evaluate model performance on training data (e.g., RMSE)
actual_profit_train <- train_data$uniamiq
rmse_train <- sqrt(mean((predicted_profit_train - actual_profit_train)^2))
print(paste("Root Mean Square Error (RMSE) on Training Data:", rmse_train))
# Load necessary libraries
library(splines)
library(mgcv)
library(ggplot2)
# Read and clean the data
compustat_data <- read.csv("compustat2.csv")
# Variable selection rationale: (Provide your rationale here)
selected_vars <- c("uniamiq", "cogsq", "revtq")
# Create a new data frame with only the selected columns
new_compustat_data <- compustat_data[, selected_vars]
new_compustat_data <- na.omit(new_compustat_data)
# Assuming compustat_data and new_compustat_data are already loaded and cleaned
# Fit individual splines for each variable --------------------------------
fit_spline_cogsq <- lm(uniamiq ~ bs(cogsq, df=4), data=new_compustat_data)
fit_spline_revtq <- lm(uniamiq ~ bs(revtq, df=4), data=new_compustat_data)
# Create data for plotting
plot_data_cogsq <- data.frame(cogsq = seq(min(new_compustat_data$cogsq), max(new_compustat_data$cogsq), length.out=100))
plot_data_revtq <- data.frame(revtq = seq(min(new_compustat_data$revtq), max(new_compustat_data$revtq), length.out=100))
# Predict using the fitted models
plot_data_cogsq$predicted_uniamiq <- predict(fit_spline_cogsq, newdata=plot_data_cogsq)
plot_data_revtq$predicted_uniamiq <- predict(fit_spline_revtq, newdata=plot_data_revtq)
# Plotting the spline for cogsq
ggplot(new_compustat_data, aes(x=cogsq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_cogsq, aes(x=cogsq, y=predicted_uniamiq), color='red') +
ggtitle("Spline Fit for cogsq") +
xlab("cogsq") +
ylab("uniamiq")
# Plotting the spline for revtq
ggplot(new_compustat_data, aes(x=revtq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_revtq, aes(x=revtq, y=predicted_uniamiq), color='blue') +
ggtitle("Spline Fit for revtq") +
xlab("revtq") +
ylab("uniamiq")
# Fit the additive model
fit_additive <- gam(uniamiq ~ s(cogsq) + s(revtq), data=new_compustat_data)
summary(fit_additive)
# Use the additive model to predict profitability
predicted_profit <- predict(fit_additive, newdata=new_compustat_data)
# Add the predicted_profit as a new column
new_compustat_data$predicted_profit <- predicted_profit
View(new_compustat_data)
summary(fit_additive)
# Fit the additive model
fit_additive <- gam(uniamiq ~ s(cogsq) + s(revtq)+s(teqq), data=new_compustat_data)
# Fit the additive model
fit_additive <- gam(uniamiq ~ s(cogsq) + s(revtq), data=new_compustat_data)
install.packages("glmnet")
# Load necessary libraries
library(splines)
library(mgcv)
library(ggplot2)
library(glmnet)  # Add this for Ridge Regression
# Read and clean the data
compustat_data <- read.csv("compustat2.csv")
# Variable selection rationale: (Provide your rationale here)
selected_vars <- c("uniamiq", "cogsq", "revtq")
# Create a new data frame with only the selected columns
new_compustat_data <- compustat_data[, selected_vars]
new_compustat_data <- na.omit(new_compustat_data)
# Split data into training and testing sets
set.seed(123)
train_index <- sample(seq_len(nrow(new_compustat_data)), size = floor(0.8 * nrow(new_compustat_data)))
train_data <- new_compustat_data[train_index, ]
test_data <- new_compustat_data[-train_index, ]
# Prepare the data for Ridge Regression
X_train <- as.matrix(train_data[, c("cogsq", "revtq")])
y_train <- train_data$uniamiq
X_test <- as.matrix(test_data[, c("cogsq", "revtq")])
y_test <- test_data$uniamiq
# Fit the Ridge Regression model
fit_ridge <- glmnet(X_train, y_train, alpha = 0)
# Cross-validation to find the best lambda
cv_fit_ridge <- cv.glmnet(X_train, y_train, alpha = 0)
best_lambda <- cv_fit_ridge$lambda.min
# Refit the model using the best lambda
fit_ridge_best <- glmnet(X_train, y_train, alpha = 0, lambda = best_lambda)
# Make predictions on the test set
predicted_profit_test_ridge <- predict(fit_ridge_best, s = best_lambda, newx = X_test)
# Calculate RMSE for the test set
rmse_test_ridge <- sqrt(mean((predicted_profit_test_ridge - y_test)^2))
print(paste("Test RMSE with Ridge Regression:", rmse_test_ridge))
# Make predictions on the training set
predicted_profit_train_ridge <- predict(fit_ridge_best, s = best_lambda, newx = X_train)
# Calculate RMSE for the training set
rmse_train_ridge <- sqrt(mean((predicted_profit_train_ridge - y_train)^2))
print(paste("Training RMSE with Ridge Regression:", rmse_train_ridge))
# Load necessary libraries
library(splines)
library(mgcv)
library(ggplot2)
library(glmnet)  # Add this for Ridge Regression
# Read and clean the data
compustat_data <- read.csv("compustat2.csv")
# Variable selection rationale: (Provide your rationale here)
selected_vars <- c("uniamiq", "cogsq", "revtq")
# Create a new data frame with only the selected columns
new_compustat_data <- compustat_data[, selected_vars]
new_compustat_data <- na.omit(new_compustat_data)
# Split data into training and testing sets
set.seed(123)
train_index <- sample(seq_len(nrow(new_compustat_data)), size = floor(0.8 * nrow(new_compustat_data)))
train_data <- new_compustat_data[train_index, ]
test_data <- new_compustat_data[-train_index, ]
# Prepare the data for Ridge Regression
X_train <- as.matrix(train_data[, c("cogsq", "revtq")])
y_train <- train_data$uniamiq
X_test <- as.matrix(test_data[, c("cogsq", "revtq")])
y_test <- test_data$uniamiq
# Fit the Ridge Regression model
fit_ridge <- glmnet(X_train, y_train, alpha = 0)
# Cross-validation to find the best lambda
cv_fit_ridge <- cv.glmnet(X_train, y_train, alpha = 0)
best_lambda <- cv_fit_ridge$lambda.min
# Refit the model using the best lambda
fit_ridge_best <- glmnet(X_train, y_train, alpha = 0, lambda = best_lambda)
# Make predictions on the test set
predicted_profit_test_ridge <- predict(fit_ridge_best, s = best_lambda, newx = X_test)
# Calculate RMSE for the test set
rmse_test_ridge <- sqrt(mean((predicted_profit_test_ridge - y_test)^2))
print(paste("Test RMSE with Ridge Regression:", rmse_test_ridge))
# Make predictions on the training set
predicted_profit_train_ridge <- predict(fit_ridge_best, s = best_lambda, newx = X_train)
# Calculate RMSE for the training set
rmse_train_ridge <- sqrt(mean((predicted_profit_train_ridge - y_train)^2))
print(paste("Training RMSE with Ridge Regression:", rmse_train_ridge))
# Plotting the spline for revtq
ggplot(new_compustat_data, aes(x=revtq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_revtq, aes(x=revtq, y=predicted_uniamiq), color='blue') +
ggtitle("Spline Fit for revtq") +
xlab("revtq") +
ylab("uniamiq")
ggplot(new_compustat_data, aes(x=cogsq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_cogsq, aes(x=cogsq, y=predicted_uniamiq), color='red') +
ggtitle("Spline Fit for cogsq") +
xlab("cogsq") +
ylab("uniamiq")
ggplot(new_compustat_data, aes(x=cogsq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_cogsq, aes(x=cogsq, y=predicted_uniamiq), color='red') +
ggtitle("Spline Fit for cogsq") +
xlab("cogsq") +
ylab("uniamiq") +
xlim(0, 20000)
ggplot(new_compustat_data, aes(x=revtq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_revtq, aes(x=revtq, y=predicted_uniamiq), color='blue') +
ggtitle("Spline Fit for revtq") +
xlab("revtq") +
ylab("uniamiq")
# Plotting the spline for revtq
ggplot(new_compustat_data, aes(x=revtq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_revtq, aes(x=revtq, y=predicted_uniamiq), color='blue') +
ggtitle("Spline Fit for revtq") +
xlab("revtq") +
ylab("uniamiq") +
xlim(0, 20000)
# Plotting the spline for revtq
ggplot(new_compustat_data, aes(x=revtq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_revtq, aes(x=revtq, y=predicted_uniamiq), color='blue') +
ggtitle("Spline Fit for revtq") +
xlab("revtq") +
ylab("uniamiq") +
xlim(0, 15000
# Plotting the spline for revtq
ggplot(new_compustat_data, aes(x=revtq, y=uniamiq)) +
# Plotting the spline for revtq
ggplot(new_compustat_data, aes(x=revtq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_revtq, aes(x=revtq, y=predicted_uniamiq), color='blue') +
ggtitle("Spline Fit for revtq") +
xlab("revtq") +
ylab("uniamiq") +
xlim(0, 15000)
# Plotting the spline for revtq
ggplot(new_compustat_data, aes(x=revtq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_revtq, aes(x=revtq, y=predicted_uniamiq), color='blue') +
ggtitle("Spline Fit for revtq") +
xlab("revtq") +
ylab("uniamiq") +
xlim(0, 15000)
# Plotting the spline for cogsq
ggplot(new_compustat_data, aes(x=cogsq, y=uniamiq)) +
geom_point() +
geom_line(data=plot_data_cogsq, aes(x=cogsq, y=predicted_uniamiq), color='red') +
ggtitle("Spline Fit for cogsq") +
xlab("cogsq") +
ylab("uniamiq") +
xlim(0, 20000)
